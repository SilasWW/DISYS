// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChitChat_Join_FullMethodName  = "/someName.ChitChat/join"
	ChitChat_Chat_FullMethodName  = "/someName.ChitChat/chat"
	ChitChat_Leave_FullMethodName = "/someName.ChitChat/leave"
)

// ChitChatClient is the client API for ChitChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChitChatClient interface {
	Join(ctx context.Context, in *Publish, opts ...grpc.CallOption) (ChitChat_JoinClient, error)
	Chat(ctx context.Context, in *Publish, opts ...grpc.CallOption) (*Acknowledge, error)
	Leave(ctx context.Context, in *Publish, opts ...grpc.CallOption) (*Acknowledge, error)
}

type chitChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatClient(cc grpc.ClientConnInterface) ChitChatClient {
	return &chitChatClient{cc}
}

func (c *chitChatClient) Join(ctx context.Context, in *Publish, opts ...grpc.CallOption) (ChitChat_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChitChat_ServiceDesc.Streams[0], ChitChat_Join_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chitChatJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChitChat_JoinClient interface {
	Recv() (*Broadcast, error)
	grpc.ClientStream
}

type chitChatJoinClient struct {
	grpc.ClientStream
}

func (x *chitChatJoinClient) Recv() (*Broadcast, error) {
	m := new(Broadcast)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chitChatClient) Chat(ctx context.Context, in *Publish, opts ...grpc.CallOption) (*Acknowledge, error) {
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, ChitChat_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatClient) Leave(ctx context.Context, in *Publish, opts ...grpc.CallOption) (*Acknowledge, error) {
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, ChitChat_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChitChatServer is the server API for ChitChat service.
// All implementations must embed UnimplementedChitChatServer
// for forward compatibility
type ChitChatServer interface {
	Join(*Publish, ChitChat_JoinServer) error
	Chat(context.Context, *Publish) (*Acknowledge, error)
	Leave(context.Context, *Publish) (*Acknowledge, error)
	mustEmbedUnimplementedChitChatServer()
}

// UnimplementedChitChatServer must be embedded to have forward compatible implementations.
type UnimplementedChitChatServer struct {
}

func (UnimplementedChitChatServer) Join(*Publish, ChitChat_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChitChatServer) Chat(context.Context, *Publish) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChitChatServer) Leave(context.Context, *Publish) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChitChatServer) mustEmbedUnimplementedChitChatServer() {}

// UnsafeChitChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServer will
// result in compilation errors.
type UnsafeChitChatServer interface {
	mustEmbedUnimplementedChitChatServer()
}

func RegisterChitChatServer(s grpc.ServiceRegistrar, srv ChitChatServer) {
	s.RegisterService(&ChitChat_ServiceDesc, srv)
}

func _ChitChat_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Publish)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChitChatServer).Join(m, &chitChatJoinServer{stream})
}

type ChitChat_JoinServer interface {
	Send(*Broadcast) error
	grpc.ServerStream
}

type chitChatJoinServer struct {
	grpc.ServerStream
}

func (x *chitChatJoinServer) Send(m *Broadcast) error {
	return x.ServerStream.SendMsg(m)
}

func _ChitChat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).Chat(ctx, req.(*Publish))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChat_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).Leave(ctx, req.(*Publish))
	}
	return interceptor(ctx, in, info, handler)
}

// ChitChat_ServiceDesc is the grpc.ServiceDesc for ChitChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "someName.ChitChat",
	HandlerType: (*ChitChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "chat",
			Handler:    _ChitChat_Chat_Handler,
		},
		{
			MethodName: "leave",
			Handler:    _ChitChat_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "join",
			Handler:       _ChitChat_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
